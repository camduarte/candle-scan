// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © cdu4rte
//@version=5

// @description Herramientas para detectar patrones en velas japonesas.
library (title = "camdPattern")

import cdu4rte/camdLib/3

// Función para verificar el patrón de vela martillo
export isHammerPattern() =>    
    camdLib.isBearishTrend() and
     close != open and
     camdLib.getLowerShadow() >= 2 * camdLib.getBodySize() and  
     camdLib.getUpperShadow() < 0.25 * camdLib.getBodySize()

// Función para verificar el patrón de vela martillo
// index El índice de la vela.
export isHammerPattern(int index) => 
    camdLib.isBearishTrend() and
     close[index] != open[index] and
     camdLib.getLowerShadow(index) >= 2 * camdLib.getBodySize(index) and
     camdLib.getUpperShadow(index) < 0.25 * camdLib.getBodySize(index)

// Martillo invertido o inverted hammer.
export isInvertedHammerPattern() =>
    camdLib.isBearishTrend() and
     close != open and
     camdLib.getUpperShadow() >= camdLib.getBodySize() * 2 and
     camdLib.getLowerShadow() < camdLib.getBodySize() * 0.25

// Ahorcado o Hanging Man.
export isHangingManPattern() =>
 camdLib.isBullishTrend() and
  close != open and
  camdLib.getLowerShadow() >= camdLib.getBodySize() * 2 and
  camdLib.getUpperShadow() < camdLib.getBodySize() * 0.25

// Estrella Fugaz o Shooting Star.
export isShootingStarPattern() =>
    camdLib.isBullishTrend() and
     close != open and
     camdLib.getUpperShadow() >= camdLib.getBodySize() * 2 and
     camdLib.getLowerShadow() < camdLib.getBodySize() * 0.25

// Presa de cinturón alcista o bullish belt-hold line.
export isBullishBeltHoldLinePattern() =>
    camdLib.isBearishTrend() and
     close > open and open == low and
     camdLib.getUpperShadow() < camdLib.getBodySize() * 0.25 and
     camdLib.getBodySize() >= camdLib.getAverageCandleSize(0, 20) * 2

// Presa de cinturón bajista o bearish belt-hold line.
export isBearishBelthHoldLinePattern() =>
    camdLib.isBullishTrend() and
     close < open and open == high and
     camdLib.getLowerShadow() < camdLib.getBodySize() * 0.25 and
     camdLib.getBodySize() >= camdLib.getAverageCandleSize(0, 20) * 2

// Envolvente alcista o bullish engulfing.
export isBullishEngulfingPattern() =>
    camdLib.isBearishTrend() and 
     close > open and close[1] < open[1] and
     close > open[1] and open < close[1]

// Envolvente bajista o Bearish engulfing.
export isBearishEngulfingPattern() =>
    camdLib.isBullishTrend() and
     close < open and close[1] > open[1] and
      close < open[1] and open > close[1]

// Función para verificar el patrón de vela Harami alcista
export isBullishHaramiPattern() => 
    camdLib.isBearishTrend() and 
     close > open and close[1] < open[1] and
     close < open[1] and open > close[1]

// Función para verificar el patrón de vela Harami bajista
export isBearishHaramiPattern() => 
    camdLib.isBullishTrend() and
     close < open and close[1] > open[1] and
     close > open[1] and open < close[1]

export isDojiPattern() =>
    // Calcular el tamaño del cuerpo de la vela
    body_size = math.abs(close - open)
    // Calcular la sombra superior e inferior
    upper_shadow = high - math.max(open, close)
    lower_shadow = math.min(open, close) - low
    // Verificar si la vela es un Doji
    //body_size < 0.0025 * close and upper_shadow < 0.05 * close and lower_shadow < 0.05 * close
    body_size < 0.0025 * close

// Paloma mensajera o Homing pigeon
export isHomingPigeonPattern() =>
    camdLib.isBearishTrend() and
     close < open and close[1] < open[1] and
     high < open[1] and low > close[1]

// Línea de contraataque alcista o bullish counterattack line
export isBullishCounterAttackLinePattern() =>
    camdLib.isBearishTrend() and
     camdLib.getBodySize(1) > camdLib.getAverageCandleSize(1) and
     close[1] < open[1] and 
     camdLib.getBodySize() > camdLib.getAverageCandleSize(0) and
     close > open and
     camdLib.calculatePriceDifference(close[1], close) < close * 0.0025

// Línea de contraataque bajista o bearish counterattack line.
export isBearishCounterAttackLinePattern() =>
    camdLib.isBullishTrend() and
     camdLib.getBodySize(1) > camdLib.getAverageCandleSize(1) and
     close[1] > open[1] and 
     camdLib.getBodySize() > camdLib.getAverageCandleSize(0) and
     close < open and
     camdLib.calculatePriceDifference(close[1], close) < close * 0.0025

// Tres soldados blancos o three white soldiers.
export isThreeWhiteSoldiersPattern() =>
    camdLib.isBearishTrend() and
     close[2] > open[2] and close[1] > open[1] and close > open and    
     camdLib.getUpperShadow(2) <= camdLib.getBodySize(2) * 0.25 and camdLib.getUpperShadow(1) <= camdLib.getBodySize(1) * 0.25 and camdLib.getUpperShadow() <= camdLib.getBodySize() * 0.25 and
     close[2] < close[1] and close[1] < close and
     open[1] > open[2] and open[1] < close[2] and
     open > open[1] and open < close[1]

// Tres cuervos negros o three black crows.
export isThreeBlackCrowsPattern() =>
    camdLib.isBullishTrend() and
     close[2] < open[2] and close[1] < open[1] and close < open and    
     camdLib.getLowerShadow(2) <= camdLib.getBodySize(2) * 0.25 and camdLib.getLowerShadow(1) <= camdLib.getBodySize(1) * 0.25 and camdLib.getLowerShadow() <= camdLib.getBodySize() * 0.25 and
     close[2] > close[1] and close[1] > close and
     open[1] < open[2] and open[1] > close[2] and
     open < open[1] and open > close[1]

// Tres cuervos negros idénticos o three identical black crows.
export isThreeIdenticalBlackCrowsPattern()  =>
    camdLib.isBullishTrend() and
     close[2] < open[2] and close[1] < open[1] and close < open and
     camdLib.getLowerShadow(2) <= camdLib.getBodySize(2) * 0.25 and camdLib.getLowerShadow(1) <= camdLib.getBodySize(1) * 0.25 and camdLib.getLowerShadow() <= camdLib.getBodySize() * 0.25 and
     close[1] < close[2] and close < close[1] and
     camdLib.calculatePriceDifference(close[2], open[1]) < open[1] * 0.0025 and
     camdLib.calculatePriceDifference(close[1], open) < open * 0.0025

// Verifica si la apertura de la vela indicada está dentro del cuerpo de la vela anterior.
export isOpenInsidePrevBody(int position) =>
    if camdLib.isWhite(close[position + 1], open[position + 1])
        open[position] < close[position + 1] and open[position] > open[position + 1] 
    else
        open[position] < open[position + 1] and open[position] > close[position + 1]

//Parada previa o advance block.
export isAdvanceBlockPattern() =>
    camdLib.isBullishTrend() and
     camdLib.isWhite(close[2], open[2]) and camdLib.isWhite(close[1], open[1]) and camdLib.isWhite(close, open) and
     camdLib.isHigherClose(close[1], close[2]) and  camdLib.isHigherClose(close, close[1]) and
     camdLib.isOpenInsidePrevBody(1) and camdLib.isOpenInsidePrevBody(0) and
     camdLib.isExhaustionPattern(close[2], open[2], close[1], open[1], close, open)

// Reflexión o deliberation pattern.
export isDeliberationPattern() =>
    camdLib.isBullishTrend() and
     camdLib.isWhite(close[2], open[2]) and camdLib.isWhite(close[1], open[2]) and camdLib.isWhite(close, open) and
     camdLib.isHigherClose(close[1], close[2]) and
     camdLib.isOpenInsidePrevBody(1) and
     camdLib.isExhaustionPattern(close[1], open[1], close, open, high) and
     (not camdLib.isHigherClose(close, close[1]) or camdLib.isBullishGap() or isDojiPattern())

// Suelo de tres ríos o Unique three rivers bottom.
export isUniqueThreeRiversBottomPattern() =>
    camdLib.isBearishTrend() and
     camdLib.isBlack(close[2], open[2]) and camdLib.isBigBody(2, 5) and
     isHammerPattern(1) and camdLib.isBlack(close[1], open[1]) and camdLib.isBodyInsidePrevBody(1) and
     camdLib.isBodyInTheUpperMiddleZone(1) and camdLib.isLowerLow(1) and
     camdLib.isWhite(close, open) and camdLib.isBodyInsidePrevBody(0, 2) and camdLib.isBodyBelowPrevBody(0, 1)

// Tres estrellas al sur o Three stars in the south.
export isThreeStarsInTheSouthPattern() =>
    candle1 = 2, candle2 = 1, candle3 = 0
    camdLib.isBearishTrend() and
     camdLib.isBlack(close[candle1], open[candle1]) and camdLib.isLongShadow(candle1) and
     camdLib.isBlack(close[candle2], open[candle2]) and camdLib.getBodySize(candle2) < camdLib.getBodySize(candle1) and  not camdLib.isLowerLow(candle2) and
     camdLib.isBlack(close[candle3], open[candle3]) and not camdLib.hasShadows(candle3) and camdLib.isInsidePrevRange(candle3, candle2)

// Escape alcista o Bullish Breakaway.
export isBullishBreakawayPattern() =>
    candle1 = 4, candle2 = 3, candle3 = 2, candle4 = 1, candle5 = 0
    camdLib.isBearishTrend() and
     camdLib.isBlack(close[candle1], open[candle1]) and camdLib.isBigBody(candle1, 5) and
     camdLib.isBlack(close[candle2], open[candle2]) and camdLib.isSmallBody(candle2, 5) and camdLib.isBearishGapRelativeToTheShadows(candle2, candle1) and
     open[candle3] < low[candle2] and open[candle4] < low[candle2]and 
     not camdLib.isHigherClose(close[candle3], close[candle2]) and not camdLib.isHigherClose(close[candle4], close[candle4]) and
     camdLib.isBlack(close[candle3], open[candle3]) and camdLib.isBlack(close[candle4], open[candle4]) and
     camdLib.isWhite(close[candle5], open[candle5]) and close[candle5] < low[candle1] and close[candle5] > high[candle2] and
     camdLib.isSmallBody(candle3, 5) and camdLib.isSmallBody(candle4, 5)

// Escape bajista o Bearish Breakaway.
export isBearishBreakawayPattern() =>
    candle1 = 4, candle2 = 3, candle3 = 2, candle4 = 1, candle5 = 0
    camdLib.isBullishTrend() and
     camdLib.isWhite(close[candle1], open[candle1]) and camdLib.isBigBody(candle1, camdLib.getSessionsLength()) and
     camdLib.isWhite(close[candle2], open[candle2]) and camdLib.isSmallBody(candle2, camdLib.getSessionsLength()) and camdLib.isBullishGapRelativeToTheShadows(candle2, candle1) and
     open[candle3] > low[candle2] and open[candle4] > low[candle2] and
     camdLib.isHigherClose(close[candle3], close[candle2]) and camdLib.isHigherClose(close[candle4], close[candle3]) and
     camdLib.isWhite(close[candle3], open[candle3]) and camdLib.isWhite(close[candle4], open[candle4]) and
     camdLib.isBlack(close[candle5], open[candle5]) and
     close[candle5] > high[candle1] and close[candle5] < low[candle2]

// Patrón de bebé oculto o Concealing baby swallow.
export isConcealingBabySwallowPattern() =>
    candle1 = 4, candle2 = 3, candle3 = 2, candle4 = 1, candle5 = 0
    camdLib.isBearishTrend() and 
     camdLib.isBlack(close[candle2], open[candle2]) and camdLib.isBlack(close[candle3], open[candle3]) and
     not camdLib.hasShadows(candle2) and not camdLib.hasShadows(candle3) and
     camdLib.isLowerClose(close[candle2], close[candle1]) and
     camdLib.isLowerClose(close[candle3], close[candle2]) and
     camdLib.isBlack(close[candle4], open[candle4]) and
     camdLib.isBearishGapRelativeToBodies(candle4) and
     high[candle4] > close[candle2] and
     camdLib.isBlack(close[candle5], open[candle5]) and
     camdLib.isBullishGapRelativeToBodies(candle5) and
     camdLib.isEngulfingBar(candle5) and  not camdLib.hasShadows(candle5)

// @function Determina si existe la formación del patrón Stick Sandwich.
// @returns true si existe la formación del patrón.
export isStickSandwichPattern() =>
    candle1 = 2, candle2 = 1, candle3 = 0
    camdLib.isBearishTrend() and
     camdLib.isBlack(close[candle1], open[candle1]) and camdLib.isBigBody(candle1, camdLib.getSessionsLength()) and
     camdLib.isWhite(close[candle2], open[candle2]) and
     low[candle2] > close[candle1] and
     camdLib.isBlack(close[candle3], open[candle3]) and camdLib.isEngulfingBar(candle3) and camdLib.isCloseNearToPrevClose(candle3, candle1)

// @function Determina si existe la formación del patrón Mínimos comunes o Matching low.
// @returns true si existe la formación del patrón.
export isMatchingLowPattern() =>
    candle1 = 1, candle2 = 0
    camdLib.isBearishTrend() and
     camdLib.isBlack(close[candle1], open[candle1]) and camdLib.isBigBody(candle1, camdLib.getSessionsLength()) and camdLib.isCloseNearToLow(candle1) and
     isOpenInsidePrevBody(candle2) and camdLib.isCloseNearToPrevClose(candle2, candle1) and camdLib.isBlack(close[candle2], open[candle2])

